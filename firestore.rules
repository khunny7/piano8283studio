rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Users collection - users can read their own profile, admins can read/write all
    match /users/{userId} {
      allow read: if request.auth != null && 
                     (request.auth.uid == userId || isAdmin());
      allow write: if request.auth != null && 
                      (request.auth.uid == userId || isAdmin());
      allow create: if request.auth != null && request.auth.uid == userId;
    }
    
    // Blog posts - read access for everyone, write access for authenticated users
    // Private posts are filtered at the application level
    match /blogPosts/{postId} {
      allow read: if true;
      allow write: if request.auth != null;
    }
    
    // Test documents - allow read/write for development
    match /test/{document=**} {
      allow read, write: if true;
    }
    
    // Messages collection for FirestoreDemo
    match /messages/{document=**} {
      allow read, write: if true;
    }
  }
}